package com.ujuezeoke.learning.cve.store;

import com.mongodb.MongoClient;
import com.ujuezeoke.learning.cve.model.*;
import org.junit.Before;
import org.junit.Test;

import java.util.Collections;
import java.util.List;

import static java.util.Arrays.asList;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsCollectionContaining.hasItem;

/**
 * Created by ujuezeoke on 02/12/2015.
 */
public class VulnerabilityStoreTest {

    public static final String TEST_COLLECTION_NAME = "CVE_DATABASE";
    public static final String HOSTNAME = "127.0.0.1";
    public static final int PORT = 9240;
    private VulunerabilityStore underTest;

    @Before
    public void setUp() throws Exception {
        underTest = new MongoDbVulunerabilityStore(TEST_COLLECTION_NAME, HOSTNAME, PORT);

        new MongoClient(HOSTNAME, PORT).getDatabase(TEST_COLLECTION_NAME)
                .drop();
    }

    @Test
    public void storesOnlyOneInstance() {
        underTest.store(buildCveVulnerability(Collections.emptyList()));
        underTest.store(buildCveVulnerability(Collections.emptyList()));
        List<CveVulnerability> cveVulnerabilities =
                underTest
                        .retriveVulunerabilitiesWithPredicate(
                                (entry) -> entry.getDocumentType()
                                        .equals(buildCveVulnerability(Collections.emptyList()).getDocumentType()
                                        )
                        );

        assertThat(cveVulnerabilities.size(), is(1));
        assertThat(cveVulnerabilities, hasItem(buildCveVulnerability(Collections.emptyList())));
    }

    @Test
    public void updatesTheInstance() {
        List<CveNote> cveNotes = asList(new CveNote("dummyType", "ordinal","title","audience", "note"));

        underTest.store(buildCveVulnerability(cveNotes));

        List<CveVulnerability> cveVulnerabilities =
                underTest
                        .retriveVulunerabilitiesWithPredicate(
                                (entry) -> entry.getDocumentType()
                                        .equals(buildCveVulnerability(Collections.emptyList()).getDocumentType()
                                        )
                        );

        assertThat(cveVulnerabilities.size(), is(1));
        assertThat(cveVulnerabilities, hasItem(buildCveVulnerability(cveNotes)));
    }

    private CveVulnerability buildCveVulnerability(List<CveNote> cveNotes) {
        return new CveVulnerability(
                new CveDocumentType("whay"),
                new CveDocumentVersion("1223.322"),
                new CveDocumentDateTime("2015-11-27T06:01:46"),
                cveNotes,
                new CveVulnerabilityTitle("SomeTitle"),
                cveNotes,
                asList(new CveVulnerabilityReference(new ReferenceUrl("http://stuff"), new ReferenceDescription("more description")),
                        new CveVulnerabilityReference(new ReferenceUrl("file://why.com"), new ReferenceDescription("Jump")))
        );
    }
}
