package com.ujuezeoke.learning.cve.store.codecs;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.ujuezeoke.learning.cve.model.CveVulnerability;
import org.bson.BsonReader;
import org.bson.BsonWriter;
import org.bson.codecs.Codec;
import org.bson.codecs.DecoderContext;
import org.bson.codecs.EncoderContext;
import org.bson.codecs.configuration.CodecRegistry;

/**
 * Created by ujuezeoke on 15/02/2016.
 */
public class CveVulnerabilityCodec implements Codec<CveVulnerability> {
    public static final String OBJECT_TITLE = "cveVulnerability";
    private final CodecRegistry codecRegistry;
    private final Gson gson;

    public CveVulnerabilityCodec(CodecRegistry codecRegistry) {
        this.codecRegistry = codecRegistry;
        this.gson = new GsonBuilder()
                .setPrettyPrinting()
                .create();
    }

    @Override
    public CveVulnerability decode(BsonReader reader, DecoderContext decoderContext) {
        reader.readStartDocument();
        reader.readObjectId();
        String cveVulnerability = reader.readString(OBJECT_TITLE);
        reader.readEndDocument();

        return gson.fromJson(cveVulnerability, CveVulnerability.class);
    }

    @Override
    public void encode(BsonWriter writer, CveVulnerability value, EncoderContext encoderContext) {
        writer.writeStartDocument();
        writer.writeString(OBJECT_TITLE, gson.toJson(value, CveVulnerability.class));

        writer.writeEndDocument();
    }

    @Override
    public Class<CveVulnerability> getEncoderClass() {
        return CveVulnerability.class;
    }
}
