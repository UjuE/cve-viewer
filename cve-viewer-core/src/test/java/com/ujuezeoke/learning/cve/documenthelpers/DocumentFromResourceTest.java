package com.ujuezeoke.learning.cve.documenthelpers;

import org.dom4j.Document;
import org.dom4j.io.STAXEventReader;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

import javax.xml.stream.XMLStreamException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Optional;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.*;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 * Created by ujuezeoke on 01/12/2015.
 */
public class DocumentFromResourceTest {

    private DocumentFromResource underTest;
    private File file;
    private STAXEventReader staxEventReader;

    @Before
    public void setUp() throws Exception {
        file = mock(File.class);
        staxEventReader = mock(STAXEventReader.class);
        underTest = new DocumentFromResource(staxEventReader);
    }

    @Test
    public void fileNotFound() {
        when(file.exists()).thenReturn(false);
        Optional<Document> documentOptional = underTest.convert(file);

        assertThat(documentOptional.isPresent(), is(false));
    }

    @Test
    public void fileIsNotAFile() {
        when(file.exists()).thenReturn(true);
        when(file.isFile()).thenReturn(false);
        Optional<Document> documentOptional = underTest.convert(file);

        assertThat(documentOptional.isPresent(), is(false));
    }

    @Test
    public void saxConversionFails() throws Exception {

        when(file.exists()).thenReturn(true);
        when(file.isFile()).thenReturn(true);
        when(staxEventReader.readDocument(any(FileInputStream.class))).thenThrow(new RuntimeException("Why me"));

        Optional<Document> documentOptional = underTest.convert(file);

        assertThat(documentOptional.isPresent(), is(false));
    }
}