package com.ujuezeoke.learning.cve;

import com.ujuezeoke.learning.cve.http.HttpRequestSender;
import com.ujuezeoke.learning.cve.store.DocumentStore;
import com.ujuezeoke.learning.cve.store.RetrieveAndStoreCveFile;
import org.apache.http.client.methods.HttpGet;
import org.junit.Before;
import org.junit.Test;

import java.io.InputStream;

import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsCollectionContaining.hasItem;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.assertTrue;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
 * Created by ujuezeoke on 29/11/2015.
 */
public class RetrieveAndStoreCveFileTest {

    private static final String CVE_SAMPLE_FILE_NAME = "cve-sample.xml";

    private RetrieveAndStoreCveFile underTest;
    private HttpRequestSender httpRequestSender;
    private DocumentStore documentStore;

    @Before
    public void setUp() throws Exception {
        documentStore = mock(DocumentStore.class);
        httpRequestSender = mock(HttpRequestSender.class);
//
//        vulnerabilityFromDocument = mock(VulnerabilityFromDocument.class);
//        documentFromResource = mock(DocumentFromResource.class);
//        cveDocumentType = new CveDocumentType("CVE List");
//        document = mock(Document.class);
//        documentType = new CveDocumentType("SomeCveType");
//        documentNote = new CveNote("someNoteType", "ordinal", "annoying", "audience", "actualNote");
//        cveVulnerabilityTitle = new CveVulnerabilityTitle("SomeTitle");
//        cveVulnerabilityNote = new CveNote("anotherNote", "someOrdinal", "note");
//        cveVulnerabilityReference = new CveVulnerabilityReference(new ReferenceUrl("someUrl"), new ReferenceDescription("whyme"));
//        documentVersion = new CveDocumentVersion("2001233.344");
//        documentDateTime = new CveDocumentDateTime(LocalDateTime.now().toString());
//
//        cveVulnerability = new CveVulnerability(
//                documentType,
//                documentVersion,
//                documentDateTime,
//                asList(documentNote),
//                cveVulnerabilityTitle,
//                asList(cveVulnerabilityNote),
//                asList(cveVulnerabilityReference)
//        );
//        cveVulnerabilities = asList(cveVulnerability).stream();
        underTest = new RetrieveAndStoreCveFile(httpRequestSender, documentStore);
    }

//    @Test
//    public void retrieveCveFileFromLocalResourceAsString() {
//        when(documentFromResource.convert(new File(getFileLocation()))).thenReturn(Optional.of(document));
//        when(vulnerabilityFromDocument.convert(document)).thenReturn(cveVulnerabilities);
//
//        List<CveVulnerability> cveVulnerabilities = underTest.retrieveLocalResource(getFileLocation()).collect(Collectors.toList());
//        CveVulnerability firstCveVulnerability = cveVulnerabilities.get(0);
//
//        assertThat(firstCveVulnerability.getDocumentType(), is(documentType));
//        assertThat(firstCveVulnerability.getDocumentNotes(), hasItem(documentNote));
//        assertThat(firstCveVulnerability.getTitle(), is(cveVulnerabilityTitle));
//        assertThat(firstCveVulnerability.getReferences(), hasItem(cveVulnerabilityReference));
//        assertThat(firstCveVulnerability.getVulnerabilityNotes(), hasItem(cveVulnerabilityNote));
//    }


    @Test
    public void retrieveFromRemoteResourceAndStore() {
        final InputStream inputStream = mock(InputStream.class);
        when(httpRequestSender.execute(any(HttpGet.class))).thenReturn(inputStream);

        underTest.retrieveAndStoreRemoteResource("http://SomeUrl");
        verify(documentStore).store(null, inputStream);
    }

//    private String getFileLocation() {
//        return getResourceFile().getAbsolutePath();
//    }
//
//    private File getResourceFile() {
//        URL systemResource = ClassLoader.getSystemResource(CVE_SAMPLE_FILE_NAME);
//        return new File(systemResource.getFile());
//    }
}
