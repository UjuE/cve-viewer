package com.ujuezeoke.learning.cve;

import com.ujuezeoke.learning.cve.documenthelpers.DocumentFromResource;
import com.ujuezeoke.learning.cve.documenthelpers.VulnerabilityFromDocument;
import com.ujuezeoke.learning.cve.http.HttpRequestSender;
import com.ujuezeoke.learning.cve.model.*;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.HttpClients;
import org.dom4j.Document;
import org.dom4j.io.STAXEventReader;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

import java.io.File;
import java.net.URL;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static java.util.Arrays.asList;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsCollectionContaining.hasItem;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.assertTrue;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
 * Created by ujuezeoke on 29/11/2015.
 */
@Ignore("Slow test. Fix this.")
public class RetrieveCveFileTest {

    private static final String CVE_SAMPLE_FILE_NAME = "cve-sample.xml";

    private RetrieveCveFile underTest;
    private CveDocumentType cveDocumentType;
    private HttpRequestSender httpRequestSender;
    private DocumentFromResource documentFromResource;
    private Document document;
    private Stream<CveVulnerability> cveVulnerabilities;
    private VulnerabilityFromDocument vulnerabilityFromDocument;
    private CveVulnerability cveVulnerability;
    private CveDocumentType documentType;
    private CveNote documentNote;
    private CveVulnerabilityTitle cveVulnerabilityTitle;
    private CveNote cveVulnerabilityNote;
    private CveVulnerabilityReference cveVulnerabilityReference;
    private CveDocumentVersion documentVersion;
    private CveDocumentDateTime documentDateTime;

    @Before
    public void setUp() throws Exception {
        vulnerabilityFromDocument = mock(VulnerabilityFromDocument.class);
        documentFromResource = mock(DocumentFromResource.class);
        httpRequestSender = mock(HttpRequestSender.class);
        cveDocumentType = new CveDocumentType("CVE List");
        document = mock(Document.class);
        documentType = new CveDocumentType("SomeCveType");
        documentNote = new CveNote("someNoteType", "ordinal", "annoying", "audience", "actualNote");
        cveVulnerabilityTitle = new CveVulnerabilityTitle("SomeTitle");
        cveVulnerabilityNote = new CveNote("anotherNote", "someOrdinal", "note");
        cveVulnerabilityReference = new CveVulnerabilityReference(new ReferenceUrl("someUrl"), new ReferenceDescription("whyme"));
        documentVersion = new CveDocumentVersion("2001233.344");
        documentDateTime = new CveDocumentDateTime(LocalDateTime.now().toString());

        cveVulnerability = new CveVulnerability(
                documentType,
                documentVersion,
                documentDateTime,
                asList(documentNote),
                cveVulnerabilityTitle,
                asList(cveVulnerabilityNote),
                asList(cveVulnerabilityReference)
        );
        cveVulnerabilities = asList(cveVulnerability).stream();
        underTest = new RetrieveCveFile(httpRequestSender, documentFromResource, vulnerabilityFromDocument);
    }

    @Test
    public void retrieveCveFileFromLocalResourceAsString() {
        when(documentFromResource.convert(new File(getFileLocation()))).thenReturn(Optional.of(document));
        when(vulnerabilityFromDocument.convert(document)).thenReturn(cveVulnerabilities);

        List<CveVulnerability> cveVulnerabilities = underTest.retrieveLocalResource(getFileLocation()).collect(Collectors.toList());
        CveVulnerability firstCveVulnerability = cveVulnerabilities.get(0);

        assertThat(firstCveVulnerability.getDocumentType(), is(documentType));
        assertThat(firstCveVulnerability.getDocumentNotes(), hasItem(documentNote));
        assertThat(firstCveVulnerability.getTitle(), is(cveVulnerabilityTitle));
        assertThat(firstCveVulnerability.getReferences(), hasItem(cveVulnerabilityReference));
        assertThat(firstCveVulnerability.getVulnerabilityNotes(), hasItem(cveVulnerabilityNote));
    }


    @Test
    @Ignore
    public void retrieveFromRemoteResource() {
        underTest.retrieveRemoteResource("http://cve.mitre.org/data/downloads/allitems-cvrf-year-2015.xml");
        verify(httpRequestSender).execute(any(HttpGet.class));
    }

    @Test
    public void something() throws Exception {

        RetrieveCveFile retrieveCveFile = new RetrieveCveFile(
                new HttpRequestSender(
                        HttpClients::createMinimal
                ), new DocumentFromResource(new STAXEventReader()), new VulnerabilityFromDocument());

        List<CveVulnerability> cveVulnerabilities = retrieveCveFile.retrieveRemoteResource("http://cve.mitre.org/data/downloads/allitems-cvrf-year-2015.xml").collect(Collectors.toList());

        System.out.println("cveVulnerabilities.size() = " + cveVulnerabilities.size());
        System.out.println("cveDetails.getDocumentType() = " + cveVulnerabilities.get(0).getTitle());
    }

    private String getFileLocation() {
        return getResourceFile().getAbsolutePath();
    }

    private File getResourceFile() {
        URL systemResource = ClassLoader.getSystemResource(CVE_SAMPLE_FILE_NAME);
        return new File(systemResource.getFile());
    }
}
