package com.ujuezeoke.learning.cve;

import com.ujuezeoke.learning.Loggers;
import com.ujuezeoke.learning.cve.documenthelpers.DocumentFromResource;
import com.ujuezeoke.learning.cve.documenthelpers.VulnerabilityFromDocument;
import com.ujuezeoke.learning.cve.http.HttpRequestSender;
import com.ujuezeoke.learning.cve.model.CveVulnerability;
import org.apache.http.client.methods.HttpGet;
import org.dom4j.Document;

import java.io.File;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.Future;
import java.util.logging.Logger;
import java.util.stream.Stream;

import static com.ujuezeoke.learning.Loggers.coreLogger;
import static java.lang.String.format;

/**
 * Created by ujuezeoke on 29/11/2015.
 */
public class RetrieveCveFile {
    public static final Logger LOGGER = coreLogger();
    private HttpRequestSender httpRequestSender;
    private final DocumentFromResource documentFromResource;
    private final VulnerabilityFromDocument vulnerabilityFromDocument;

    public RetrieveCveFile(HttpRequestSender httpRequestSender, DocumentFromResource documentFromResource, VulnerabilityFromDocument vulnerabilityFromDocument) {
        this.httpRequestSender = httpRequestSender;
        this.documentFromResource = documentFromResource;
        this.vulnerabilityFromDocument = vulnerabilityFromDocument;
    }

    public Stream<CveVulnerability> retrieveLocalResource(String fileLocation) {
        return retrieveLocalResource(new File(fileLocation));
    }

    public Stream<CveVulnerability> retrieveLocalResource(File file) {
        Optional<Document> document = documentFromResource.convert(file);
        return vulnerabilityFromDocument.convert(document.get());
    }

    public Stream<CveVulnerability> retrieveRemoteResource(String urlLocation) {
        LOGGER.info(format("Converting from URL '%s'", urlLocation));
        HttpGet httpGet = new HttpGet(urlLocation);
        Optional<Document> documentOptional = documentFromResource.convert(httpRequestSender.execute(httpGet));
        return vulnerabilityFromDocument.convert(documentOptional.get());
    }
}
