package com.ujuezeoke.learning.cve.documenthelpers;

import com.ujuezeoke.learning.cve.model.*;
import org.dom4j.Document;
import org.dom4j.Node;

import java.util.List;
import java.util.function.Function;
import java.util.stream.Stream;

import static java.util.stream.Collectors.toList;

/**
 * Created by ujuezeoke on 01/12/2015.
 */
public class VulnerabilityFromDocument {
    private String ROOT_ELEMENT_XPATH = "//cvrfdoc";
    private String DOCUMENT_TYPE_XPATH_EXPRESSION = ROOT_ELEMENT_XPATH + "/DocumentType";
    private String CVRFDOC_DOCUMENT_NOTES_XPATH = ROOT_ELEMENT_XPATH + "/DocumentNotes/Note";
    private String CVRFDOC_DOCUMENT_DATE_TIME_XPATH = ROOT_ELEMENT_XPATH + "/DocumentTracking/RevisionHistory/Revision/Date";
    private String CVRFDOC_DOCUMENT_VERSION_XPATH = ROOT_ELEMENT_XPATH + "/DocumentTracking/Version";
    private String VULUNERABILITY_XPATH = ROOT_ELEMENT_XPATH + "/Vulnerability";
    private String DOCUMENT_NOTE_TYPE_ATTRIBUTE = "/@Type";
    private String DOCUMENT_NOTE_ORDINAL_ATTRIBUTE = "/@Ordinal";
    private String DOCUMENT_NOTE_TITLE_ATTRIBUTE = "/@Title";
    private String DOCUMENT_NOTE_AUDIENCE_ATTRIBUTE = "/@Audience";

    public Stream<CveVulnerability> convert(Document document) {
        document.accept(new NameSpaceCleaner());
        return document.selectNodes(VULUNERABILITY_XPATH)
                .parallelStream()
                .map(nodeToCveVulnerability(
                        getDocumentType(document),
                        getDocumentNotes(document),
                        getDocumentVersion(document),
                        getDocumentDateTime(document)

                ));
    }


    private CveDocumentType getDocumentType(Document document) {
        Node node = document.selectSingleNode(DOCUMENT_TYPE_XPATH_EXPRESSION);

        return new CveDocumentType(node.getText());
    }

    private List<CveNote> getDocumentNotes(Document document) {
        return document.selectNodes(CVRFDOC_DOCUMENT_NOTES_XPATH)
                .parallelStream()
                .map(nodeToDocumentCveNote())
                .collect(toList());
    }

    private CveDocumentDateTime getDocumentDateTime(Document document) {
        Node node = document.selectSingleNode(CVRFDOC_DOCUMENT_DATE_TIME_XPATH);
        return new CveDocumentDateTime(node.getText());
    }

    private CveDocumentVersion getDocumentVersion(Document document) {
        Node node = document.selectSingleNode(CVRFDOC_DOCUMENT_VERSION_XPATH);
        return new CveDocumentVersion(node.getText());
    }

    private Function<Node, CveVulnerability> nodeToCveVulnerability(CveDocumentType documentType, List<CveNote> documentNotes, CveDocumentVersion documentVersion, CveDocumentDateTime documentDateTime) {
        return node -> new CveVulnerability(
                documentType,
                documentVersion,
                documentDateTime,
                documentNotes,
                new CveVulnerabilityTitle(getTextFromUniquePathChildPath(node, "/Title")),
                buildNotesFrom(node),
                buildReferencesFrom(node)
        );
    }


    private List<CveVulnerabilityReference> buildReferencesFrom(Node node) {
        return node.selectNodes(node.getUniquePath() + "/References/Reference")
                .stream()
                .map(buildReference())
                .collect(toList());
    }

    private Function<Node, CveVulnerabilityReference> buildReference() {
        return node1 -> new CveVulnerabilityReference(
                new ReferenceUrl(getTextFromUniquePathChildPath(node1, "/URL")),
                new ReferenceDescription(getTextFromUniquePathChildPath(node1, "/Description"))
        );
    }

    private List<CveNote> buildNotesFrom(Node node) {
        return node.selectNodes(node.getUniquePath() + "/Notes/Note")
                .stream()
                .map(buildVulnerailityNote()).collect(toList());
    }

    private Function<Node, CveNote> buildVulnerailityNote() {
        return node1 -> new CveNote(
                getTextFromUniquePathChildPath(node1, DOCUMENT_NOTE_TYPE_ATTRIBUTE),
                getTextFromUniquePathChildPath(node1, DOCUMENT_NOTE_ORDINAL_ATTRIBUTE),
                getTextFromUniquePathChildPath(node1, "")
        );
    }

    private Function<Node, CveNote> nodeToDocumentCveNote() {
        return node -> new CveNote(
                getTextFromUniquePathChildPath(node, DOCUMENT_NOTE_TYPE_ATTRIBUTE),
                getTextFromUniquePathChildPath(node, DOCUMENT_NOTE_ORDINAL_ATTRIBUTE),
                getTextFromUniquePathChildPath(node, DOCUMENT_NOTE_TITLE_ATTRIBUTE),
                getTextFromUniquePathChildPath(node, DOCUMENT_NOTE_AUDIENCE_ATTRIBUTE),
                node.getText());
    }


    private String getTextFromUniquePathChildPath(Node node, String childPath) {
        return node.selectSingleNode(node.getUniquePath() + childPath).getText();
    }
}
