package com.ujuezeoke.learning.cve.documenthelpers.parser;

import com.ujuezeoke.learning.cve.model.*;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import static com.ujuezeoke.learning.Loggers.coreLogger;
import static java.util.stream.Collectors.joining;

/**
 * Created by ujuezeoke on 08/06/2016.
 */
public class CveVulnerabilityHandler extends DefaultHandler {

    private final static String ROOT_ELEMENT = "cvrfdoc";
    private final static String DOCUMENT_TYPE_EXPRESSION = ROOT_ELEMENT + "/DocumentType";
    private final static String CVRFDOC_DOCUMENT_NOTES = ROOT_ELEMENT + "/DocumentNotes/Note";
    private final static String CVRFDOC_DOCUMENT_DATE_TIME = ROOT_ELEMENT + "/DocumentTracking/RevisionHistory/Revision/Date";
    private final static String CVRFDOC_DOCUMENT_VERSION = ROOT_ELEMENT + "/DocumentTracking/Version";
    private final static String VULUNERABILITY = ROOT_ELEMENT + "/Vulnerability";
    private final static String VULUNERABILITY_TITLE = ROOT_ELEMENT + "/Vulnerability/Title";
    private final static String VULUNERABILITY_NOTE = ROOT_ELEMENT + "/Vulnerability/Notes/Note";
    private final static String VULUNERABILITY_REFERENCE = ROOT_ELEMENT + "/Vulnerability/References/Reference";
    private final static String VULUNERABILITY_REFERENCE_URL = ROOT_ELEMENT + "/Vulnerability/References/Reference/URL";
    private final static String VULUNERABILITY_REFERENCE_DESCRIPTION = ROOT_ELEMENT + "/Vulnerability/References/Reference/Description";
    private final static String DOCUMENT_NOTE_TYPE = "Type";
    private final static String DOCUMENT_NOTE_ORDINAL = "Ordinal";
    private final static String DOCUMENT_NOTE_TITLE = "Title";
    private final static String DOCUMENT_NOTE_AUDIENCE = "Audience";

    private CveVulnerabilityBuilder cveVulnerabilityBuilder;
    private CveDocumentType cveDocumentType;
    private CveVulnerabilityReferenceBuilder cveVulnerabilityReferenceBuilder;
    private CveNoteBuilder cveNoteBuilder;
    private CveDocumentVersion cveDocumentVersion;
    private CveDocumentDateTime cveDocumentDateTime;

    private List<CveNote> documentNotes = new ArrayList<>();
    private LinkedList<String> tags = new LinkedList<>();

    private List<CveVulnerability> cveVulnerabilities = new ArrayList<>();

    @Override
    public void startDocument() throws SAXException {
        coreLogger().info("Start Of Document");
    }

    @Override
    public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
        tags.add(localName);

        if (currentXpath().equals(VULUNERABILITY)) {
            cveVulnerabilityBuilder = new CveVulnerabilityBuilder();
        }

        if (currentXpath().equals(VULUNERABILITY_REFERENCE)) {
            cveVulnerabilityReferenceBuilder = new CveVulnerabilityReferenceBuilder();
        }

        if (currentXpath().equals(VULUNERABILITY_NOTE) || currentXpath().equals(CVRFDOC_DOCUMENT_NOTES)) {
            cveNoteBuilder = new CveNoteBuilder()
                    .withNoteType(attributes.getValue(DOCUMENT_NOTE_TYPE))
                    .withOrdinal(attributes.getValue(DOCUMENT_NOTE_ORDINAL))
                    .withTitle(attributes.getValue(DOCUMENT_NOTE_TITLE))
                    .withAudience(attributes.getValue(DOCUMENT_NOTE_AUDIENCE));

        }
    }

    @Override
    public void endElement(String uri, String localName, String qName) throws SAXException {
        if (localName.equals("Vulnerability")) {
            final CveVulnerability cveVulnerability = cveVulnerabilityBuilder.withDocumentNotes(documentNotes)
                    .withDocumentType(cveDocumentType)
                    .withDocumentVersion(cveDocumentVersion)
                    .withDocumentDateTime(cveDocumentDateTime)
                    .build();

            cveVulnerabilities.add(cveVulnerability);
        }

        if (localName.equals("Reference")) {
            final CveVulnerabilityReference reference = cveVulnerabilityReferenceBuilder.build();
            cveVulnerabilityBuilder = cveVulnerabilityBuilder.withReference(reference);
        }
        tags.removeLastOccurrence(localName);
    }

    @Override
    public void characters(char[] ch, int start, int length) throws SAXException {
        switch (currentXpath()) {
            case CVRFDOC_DOCUMENT_DATE_TIME: {
                cveDocumentDateTime = new CveDocumentDateTime(String.valueOf(ch, start, length));
                break;
            }
            case CVRFDOC_DOCUMENT_VERSION: {
                cveDocumentVersion = new CveDocumentVersion(String.valueOf(ch, start, length));
                break;
            }
            case DOCUMENT_TYPE_EXPRESSION: {
                this.cveDocumentType = new CveDocumentType(String.valueOf(ch, start, length));
                break;
            }
            case CVRFDOC_DOCUMENT_NOTES: {
                documentNotes.add(cveNoteBuilder.build(String.valueOf(ch, start, length)));
                break;
            }

            case VULUNERABILITY_TITLE: {
                cveVulnerabilityBuilder = cveVulnerabilityBuilder.withCveVulnerabilityTitle(
                        new CveVulnerabilityTitle(String.valueOf(ch, start, length))
                );
                break;
            }

            case VULUNERABILITY_NOTE: {
                cveVulnerabilityBuilder = cveVulnerabilityBuilder
                        .withCveNote(cveNoteBuilder.build(String.valueOf(ch, start, length)));
                break;
            }

            case VULUNERABILITY_REFERENCE_URL: {
                cveVulnerabilityReferenceBuilder = cveVulnerabilityReferenceBuilder.withReferenceUrl(
                        new ReferenceUrl(String.valueOf(ch, start, length)));
                break;
            }

            case VULUNERABILITY_REFERENCE_DESCRIPTION: {
                cveVulnerabilityReferenceBuilder = cveVulnerabilityReferenceBuilder.withReferenceDescription(
                        new ReferenceDescription(String.valueOf(ch, start, length)));
                break;
            }
        }
    }

    private String currentXpath() {
        return tags.stream().collect(joining("/"));
    }

    @Override
    public void endDocument() throws SAXException {
        coreLogger().info("Parsed " + cveVulnerabilities.size() + " vulnerability entries");
        coreLogger().info("End Of Document");
    }

    public List<CveVulnerability> getCveVulnerabilities() {
        return cveVulnerabilities;
    }
}
