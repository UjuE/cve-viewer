package com.ujuezeoke.learning.cve.controllers;

import com.ujuezeoke.learning.cve.model.CveVulnerability;
import com.ujuezeoke.learning.cve.togo.VulnerabilityPredicate;
import com.ujuezeoke.learning.cve.togo.VulnerabilityPredicateBuilder;
import com.ujuezeoke.learning.cve.togo.VulnerabilityQuery;
import com.ujuezeoke.learning.cve.validators.KeywordParam;
import com.ujuezeoke.learning.cve.validators.YearParam;
import org.glassfish.jersey.server.mvc.Viewable;

import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Logger;

import static com.ujuezeoke.learning.cve.TemplateLocation.CVE_VIEW_CONTROLLER;
import static com.ujuezeoke.learning.cve.TemplateLocation.HOME_CONTROLLER;

/**
 * Created by ujuezeoke on 29/11/2015.
 */
@Path("/")
public class HomePage {

    private VulnerabilityQuery vulnerabilityQuery;

    public HomePage(VulnerabilityQuery vulnerabilityQuery) {
        this.vulnerabilityQuery = vulnerabilityQuery;
    }

    @GET
    @Path("/home")
    @Produces(MediaType.TEXT_HTML)
    public Viewable home() {
        HashMap<String, Object> model = new HashMap<>();
        model.put("cveUrl", "http://localhost:8090/cvequery");
        return new Viewable(HOME_CONTROLLER, model);
    }


    @POST
    @Path("/cvequery")
    @Produces(MediaType.TEXT_HTML)
    public Viewable getCves(@QueryParam("year") YearParam year, @QueryParam("keywords") KeywordParam keywords) {
        Logger.getLogger(HomePage.class.getName()).info("Recieved year " + year + " And Keywords " + keywords);
        HashMap<String, Object> objectObjectHashMap = new HashMap<>();
        List<CveVulnerability> cveVulnerabilityMatching = vulnerabilityQuery.findCveVulnerabilityMatching(getBuild(year, keywords));

        objectObjectHashMap.put("cveVulnerabilities", cveVulnerabilityMatching);
        return new Viewable(CVE_VIEW_CONTROLLER, objectObjectHashMap);
    }

    private VulnerabilityPredicate getBuild(YearParam year, KeywordParam contains) {
        VulnerabilityPredicateBuilder vulnerabilityPredicateBuilder = new VulnerabilityPredicateBuilder();
        if (year != null && year.isValid()) {
            vulnerabilityPredicateBuilder.withYear(year.getYear());
        }

        if (contains != null && contains.isNotEmpty()) {
            vulnerabilityPredicateBuilder.withContains(contains.keywords());
        }
        return vulnerabilityPredicateBuilder.build();
    }

}
