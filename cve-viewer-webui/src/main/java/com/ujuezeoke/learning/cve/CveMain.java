package com.ujuezeoke.learning.cve;

import com.ujuezeoke.learning.cve.documenthelpers.DocumentFromResource;
import com.ujuezeoke.learning.cve.documenthelpers.VulnerabilityFromDocument;
import com.ujuezeoke.learning.cve.http.HttpRequestSender;
import com.ujuezeoke.learning.cve.server.CveServer;
import com.ujuezeoke.learning.cve.store.MongoDbVulunerabilityStore;
import com.ujuezeoke.learning.cve.store.VulunerabilityStore;
import org.apache.http.impl.client.HttpClients;
import org.dom4j.io.STAXEventReader;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.logging.Level;
import java.util.logging.Logger;

import static java.lang.String.format;

/**
 * Created by ujuezeoke on 29/11/2015.
 */

public class CveMain {

    public static final Logger LOGGER = Logger.getLogger(CveMain.class.getName());

    static {
        System.setProperty("java.util.logging.config.file", ClassLoader.getSystemResource("logging.properties").getFile());
    }
    public static void main(String[] args) {
        HttpRequestSender httpRequestSender = new HttpRequestSender(HttpClients::createMinimal);
        final VulunerabilityStore store = new MongoDbVulunerabilityStore("CVE_DATABASE", "127.0.0.1", 9240);
        final VulunerabilityStore store2 = new MongoDbVulunerabilityStore("CVE_DATABASE", "127.0.0.1", 9240);
        final RetrieveCveFile retrieveCveFile = new RetrieveCveFile(httpRequestSender, new DocumentFromResource(new STAXEventReader()), new VulnerabilityFromDocument());


//        ExecutorService executorService = Executors.newFixedThreadPool(10);
//        for (int year = 2015; year >= 2008; year--) {
//            int currentYear = year;
//            Future<?> future = executorService.submit(() -> {
//                String urlLocationTemplate = "http://cve.mitre.org/data/downloads/allitems-cvrf-year-" + currentYear + ".xml";
//                retrieveCveFile.retrieveRemoteResource(urlLocationTemplate)
//                        .forEach(store::store);
//                System.out.println(format("Completed Storing for year '%s'", currentYear));
//            });
//
//        }

        Executors.newFixedThreadPool(1).submit(() ->
        new CveServer(
                vulnerabilityPredicate ->
                        store2.retriveVulunerabilitiesWithPredicate(
                                vulnerabilityPredicate.getVulnerabilitySearchPredicate())
        )
                .start());
    }
}
