package com.ujuezeoke.learning.cve.togo;

import com.ujuezeoke.learning.cve.model.CveVulnerability;

import java.util.List;
import java.util.Optional;
import java.util.function.Predicate;

import static java.util.Arrays.asList;

/**
 * Created by ujuezeoke on 08/06/2016.
 */
public class VulnerabilityPredicateBuilder {

    private Integer year;
    private List<String> keywords;

    public VulnerabilityPredicateBuilder withYear(Integer year) {
        this.year = year;
        return this;
    }

    public VulnerabilityPredicateBuilder withKeywords(String keywords) {
        this.keywords = asList(keywords.split(","));
        return this;
    }

    public VulnerabilityPredicate build() {
        return () -> {
            Predicate<CveVulnerability> defaultPredicate = cveVulnerability -> true;
            if(Optional.ofNullable(year)
                    .isPresent()){
                        defaultPredicate = defaultPredicate
                                .and(cveVulnerability -> cveVulnerability
                                        .getCveYear()
                                        .getValue()
                                        .equals(String.valueOf(year))
                                );
            }

            if(Optional.ofNullable(keywords).isPresent() && !keywords.isEmpty()){
                defaultPredicate = defaultPredicate.and(
                        cveVulnerability -> cveVulnerability
                                .getVulnerabilityNotes()
                                .stream()
                                .anyMatch(cveNote ->
                                        isContainedInKeyWords(cveNote.getNote()))
                );
            }
            return defaultPredicate;
        };
    }

    private boolean isContainedInKeyWords(String note) {
        return keywords.stream().anyMatch(it -> note.toLowerCase().contains(it.toLowerCase()));
    }
}
