package com.ujuezeoke.learning.cve.render;

import com.ujuezeoke.learning.cve.model.CveNote;
import com.ujuezeoke.learning.cve.model.CveVulnerability;
import com.ujuezeoke.learning.cve.model.CveVulnerabilityReference;

import java.util.List;

import static java.lang.String.format;
import static java.util.stream.Collectors.joining;

/**
 * Created by ujuezeoke on 04/12/2015.
 */
public class VulnerabilityView {
    private static final String HTML_TEMPLATE = "<html>" +
            "<head>" +
            "<title>%s</title>" +
            "<script src=\"http://code.jquery.com/jquery-2.0.0.min.js\"></script>" +
            "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n" +
            "<link rel=\"stylesheet\" href=\"http://www.w3schools.com/lib/w3.css\">\n" +
            "</head>" +
            "<body>" +
            "%s" +
            "</body>" +
            "</html>";
    private static final String BODY_TEMPLATE = "<div class=\"w3-container w3-padding-32\">" +
            "<header class=\"w3-container w3-red\">" +
            "<h3>%s</h3>" +
            "</header>" +
            "<p>%s</p>" +
            "%s" +
            "</div>";
    private static final String TABLE_TEMPLATE = "<table class=\"w3-table w3-bordered w3-striped\">\n" +
            "<thead>" +
            "%s" +
            "</thead>" +
            "%s" +
            "</table>";
    private List<CveVulnerability> cveVulnerabilityMatching;

    public VulnerabilityView(List<CveVulnerability> cveVulnerabilityMatching) {
        this.cveVulnerabilityMatching = cveVulnerabilityMatching;
    }

    @Override
    public String toString() {
        return format(HTML_TEMPLATE, "Some Stuff", dancing());
    }

    private String dancing() {
        return cveVulnerabilityMatching.stream()
                .map(cveVulnerability -> format(
                        BODY_TEMPLATE,
                        cveVulnerability.getTitle().getValue(),
                        buildNotes(cveVulnerability.getVulnerabilityNotes()),
                        buildReferences(cveVulnerability.getReferences())))
                .collect(joining());
    }

    private String buildReferences(List<CveVulnerabilityReference> references) {
        return references.stream()
                .map(reference -> format("<p><a href=\"%s\">%s</a></p>", reference.getReferenceUrl().getValue(), reference.getReferenceDescription().getValue()))
                .collect(joining());
    }

    private String buildNotes(List<CveNote> vulnerabilityNotes) {
        String tableHeader = "<tr><th>Note Type</td><td>Note</td></tr>";
        String listOfNotes = vulnerabilityNotes.stream()
                .map(cveNote -> format("<tr><td>%s</td><td>%s</td></tr>", cveNote.getNoteType(), cveNote.getNote()))
                .collect(joining());
        return format(TABLE_TEMPLATE,tableHeader,listOfNotes);
    }
}
