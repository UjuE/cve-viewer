package com.ujuezeoke.learning.cve.togo;

import com.ujuezeoke.learning.cve.model.*;
import org.junit.Test;

import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.List;
import java.util.stream.Collectors;

import static java.util.Arrays.asList;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;

/**
 * Created by ujuezeoke on 09/06/2016.
 */
public class VulnerabilityPredicateBuilderTest {

    private VulnerabilityPredicateBuilder underTest;

    @Test
    public void filterByYear() {
        underTest = new VulnerabilityPredicateBuilder();
        final VulnerabilityPredicate predicate = underTest.withYear(2008).build();

        final List<CveVulnerability> cveVulnerabilities = asList(
                aCveVulnerabilityWith("CVE-2008-00034",
                documentNotes(new CveNote("", "1", "aNote")),
                cveNotes(new CveNote("", "1", "aNote"))),

                aCveVulnerabilityWith("CVE-2008-00084",
                        documentNotes(new CveNote("", "1", "aNote")),
                        cveNotes(new CveNote("", "1", "aNote"))),

                aCveVulnerabilityWith("CVE-2015-00084",
                        documentNotes(new CveNote("", "1", "aNote")),
                        cveNotes(new CveNote("", "1", "aNote")))
        );

        final List<CveVulnerability> filteredCveVulnerabilityList =
                cveVulnerabilities.stream().filter(predicate.build()).collect(Collectors.toList());

        assertThat(filteredCveVulnerabilityList.size(), is(2));
    }

    @Test
    public void filterByNonCaseSensitiveOneKeyword() {
        underTest = new VulnerabilityPredicateBuilder();
        final VulnerabilityPredicate predicate = underTest.withKeywords("Java").build();

        final List<CveVulnerability> cveVulnerabilities = asList(
                aCveVulnerabilityWith("CVE-2008-00034",
                documentNotes(new CveNote("", "1", "java in document notes is ignored")),
                cveNotes(new CveNote("", "1", "aNote"))),

                aCveVulnerabilityWith("CVE-2008-00084",
                        documentNotes(new CveNote("", "1", "aNote")),
                        cveNotes(new CveNote("", "1", "Java is the language."))),

                aCveVulnerabilityWith("CVE-2015-00084",
                        documentNotes(new CveNote("", "1", "aNote")),
                        cveNotes(new CveNote("", "1", "We hear a lot of java, can we talk about ruby now?")))
        );

        final List<CveVulnerability> filteredCveVulnerabilityList =
                cveVulnerabilities.stream().filter(predicate.build()).collect(Collectors.toList());

        assertThat(filteredCveVulnerabilityList.size(), is(2));
    }

    @Test
    public void filterByNonCaseSensitiveMultipleKeywordsCommaSeperated() {
        underTest = new VulnerabilityPredicateBuilder();
        final VulnerabilityPredicate predicate = underTest.withKeywords("Java,Spark,microsoft").build();

        final List<CveVulnerability> cveVulnerabilities = asList(
                aCveVulnerabilityWith("CVE-2008-00034",
                documentNotes(new CveNote("", "1", "java in document notes is ignored")),
                cveNotes(new CveNote("", "1", "Microsoft is cool. I now need to go wash my mouth with soap"))),

                aCveVulnerabilityWith("CVE-2008-00084",
                        documentNotes(new CveNote("", "1", "aNote")),
                        cveNotes(new CveNote("", "1", "With some java and a spark of interest even I can work for microsoft."))),

                aCveVulnerabilityWith("CVE-2015-00084",
                        documentNotes(new CveNote("", "1", "aNote")),
                        cveNotes(new CveNote("", "1", "We hear a lot of java, can we talk about ruby now?")))
        );

        final List<CveVulnerability> filteredCveVulnerabilityList =
                cveVulnerabilities.stream().filter(predicate.build()).collect(Collectors.toList());

        assertThat(filteredCveVulnerabilityList.size(), is(3));
    }

    private List<CveNote> cveNotes(CveNote... cveNotes) {
        return asList(cveNotes);
    }

    private List<CveNote> documentNotes(CveNote... cveNotes) {
        return asList(cveNotes);
    }

    private CveVulnerability aCveVulnerabilityWith(String title, List<CveNote> documentNotes, List<CveNote> cveNotes) {
        return new CveVulnerability(new CveDocumentType("CVE"), new CveDocumentVersion("1.234"),
                new CveDocumentDateTime(LocalDateTime.now().toInstant(ZoneOffset.UTC).getEpochSecond()),
                documentNotes,
                new CveVulnerabilityTitle(title),
                cveNotes,
                asList(new CveVulnerabilityReference(new ReferenceUrl("http://someurl"), new ReferenceDescription("Nothing"))));
    }
}